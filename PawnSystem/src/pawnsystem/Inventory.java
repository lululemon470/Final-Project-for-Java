/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pawnsystem;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author macbookpro14
 */
public class Inventory extends javax.swing.JFrame {
    String path="/Users/macbookpro14/Desktop/Fake Desktop/SETEC/Year 4/Java with IReport/PawnSystem/src/images/No_Image_Available.jpg";
    File selectedFile, imagesDir, destinationFile;
    private DefaultTableModel model;
    private Connection conn;
    /**
     * Creates new form Inventory
     */
    public Inventory() {
        initComponents();
        getData();
        btnupdate.setIcon(new FlatSVGIcon("images/edit.svg",0.35f));
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventory = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        imageLabel = new javax.swing.JLabel();
        txtid = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtitem = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtdescription = new javax.swing.JTextArea();
        btnupdate = new javax.swing.JButton();
        cboitemType = new javax.swing.JComboBox<>();
        labelTotalInventory = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Baloo Bhai 2", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(75, 84, 92));
        jLabel1.setText("Inventory : ");

        tblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "type", "description", "image"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInventory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblInventoryMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tblInventory);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Item's image", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 0, 16))); // NOI18N
        jPanel3.setToolTipText("Item Image");
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/icons8-image-100.png"))); // NOI18N
        imageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        imageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                imageLabelMousePressed(evt);
            }
        });
        jPanel3.add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 25, 165, 165));

        txtid.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        txtid.setForeground(new java.awt.Color(255, 51, 102));
        txtid.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel2.setText("Item ID:");

        txtitem.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel3.setText("Name:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel4.setText("Type:");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 16)); // NOI18N
        jLabel5.setText("Description:");

        txtdescription.setColumns(20);
        txtdescription.setRows(5);
        jScrollPane2.setViewportView(txtdescription);

        btnupdate.setText("Update");
        btnupdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdateActionPerformed(evt);
            }
        });

        cboitemType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "~ Select Option ~", "Car", "Motorcycle", "Others" }));
        cboitemType.setPreferredSize(new java.awt.Dimension(72, 30));

        labelTotalInventory.setFont(new java.awt.Font("Baloo Bhai 2", 1, 36)); // NOI18N
        labelTotalInventory.setForeground(new java.awt.Color(75, 84, 92));
        labelTotalInventory.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtitem)
                                    .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(42, 42, 42)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cboitemType, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelTotalInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTotalInventory, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtid, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(cboitemType, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtitem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnupdate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblInventoryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInventoryMousePressed
        // TODO add your handling code here:
        int selectedRowIndex = tblInventory.getSelectedRow();

        // If no row is selected, selectedRowIndex will be -1
        if (selectedRowIndex != -1) {
            // Get the table model
            TableModel model = tblInventory.getModel();

            // Retrieve the values safely with proper casting
            Object idObj = model.getValueAt(selectedRowIndex, 0);   // Assuming 1st column is ID
            Object nameObj = model.getValueAt(selectedRowIndex, 1); // Assuming 2nd column is Name
            Object typeObj = model.getValueAt(selectedRowIndex, 2); // Assuming 3rd column is Username
            Object descriptionObj = model.getValueAt(selectedRowIndex, 3); // Assuming 4th column is Password
            Object imageObj = model.getValueAt(selectedRowIndex, 4);     // Assuming 5th column is Role

            // Convert ID to string if it's an Integer or handle accordingly
            String id = idObj != null ? idObj.toString() : "";  // Handle possible Integer
            String name = nameObj instanceof String ? (String) nameObj : "";
            String type = typeObj instanceof String ? (String) typeObj : "";
            String description = descriptionObj instanceof String ? (String) descriptionObj : "";
            String image = imageObj instanceof String ? (String) imageObj : "";

            // Set the values to the respective text fields and combo box
            txtid.setText(id);
            txtitem.setText(name);
            type = type.substring(0, 1).toUpperCase() + type.substring(1);
            cboitemType.setSelectedItem(type);         
            txtdescription.setText(description);
            System.out.println(type);
            
             try {
            // Load the image from a file (can be from a URL or other source)
            BufferedImage img = ImageIO.read(new File(image));
            
            // Resize the image to fit the JLabel's size
            Image scaledImage = img.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
            
            // Set the scaled image as the icon for the JLabel
            imageLabel.setIcon(new ImageIcon(scaledImage));
            path = image;
            
            } catch (IOException e) {
                e.printStackTrace();
            }
            // Print the selected row data for debugging (optional)
            

        } else {
            System.out.println("No row selected.");
        }

    }//GEN-LAST:event_tblInventoryMousePressed
    
    private void getData(){
        model = (DefaultTableModel) tblInventory.getModel();
        model.setRowCount(0);
        labelTotalInventory.setText("");
        try {
            Connection con = Connector.getConnection();
            Statement st = con.createStatement();
            String query = "Select * from Item, Pawn where Item.item_id = Pawn.item_id and loan_status='active'";
            ResultSet rs = st.executeQuery(query);

            while(rs.next()){
                String itemId = rs.getString("item_id");
                String itemName = rs.getString("item_name");
                String itemType = rs.getString("type");
                String description = rs.getString("description");
                String image = rs.getString("image");
                Object data[] = {itemId,itemName,itemType,description,image};
                
                DefaultTableModel tblmodel = (DefaultTableModel) tblInventory.getModel();
                
                JTable table = new JTable(tblmodel);

                tblmodel.addRow(data);
            }
            
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Connection con = Connector.getConnection();
            Statement st = con.createStatement();
            String query = "Select count(Item.item_id) as totalItem from Item, Pawn where Item.item_id = Pawn.item_id and loan_status='active' ";
            ResultSet rs = st.executeQuery(query);

            while(rs.next()){
                String totalItem = String.valueOf(rs.getInt("totalItem"));
                
                labelTotalInventory.setText(totalItem);
            }
            
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(Staff.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   
    private void imageLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLabelMousePressed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choose an image file");

        // Filter for image files only
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                String name = f.getName().toLowerCase();
                return f.isDirectory() || name.endsWith(".jpg") || name.endsWith(".jpeg") || name.endsWith(".png") || name.endsWith(".gif");
            }

            @Override
            public String getDescription() {
                return "Image files (*.jpg, *.jpeg, *.png, *.gif)";
            }
        });

        // Show the file dialog
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            String imagePath = selectedFile.getAbsolutePath(); // Store the path
            System.out.println("Selected file path: " + imagePath); // Print the path

            // Create the uploaded_images folder in the src directory if it doesn't exist
            File srcDir = new File("src");
            imagesDir = new File(srcDir, "images");
            if (!imagesDir.exists()) {
                imagesDir.mkdir();
            }

            // Copy the selected image to the uploaded_images folder
            destinationFile = new File(imagesDir, selectedFile.getName());

            try {

                imagePath = selectedFile.getAbsolutePath(); // Store the path

                // Read the image
                BufferedImage image = ImageIO.read(selectedFile);

                // Scale the image to fit the label
                Image scaledImage = image.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);

                // Set the image as an icon on the label
                imageLabel.setIcon(new ImageIcon(scaledImage));
                imageLabel.setText(null);
                imagePath = selectedFile.getAbsolutePath(); // Store the path
                System.out.println("Selected file path: " + imagePath); // Print the path
                path = imagePath;
            } catch (Exception ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Could not load the image: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_imageLabelMousePressed

    private void btnupdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdateActionPerformed
        // TODO add your handling code here:
        if(!txtid.getText().equalsIgnoreCase("")
            && cboitemType.getSelectedIndex()!=0){
            String sid = txtid.getText();
            String item = txtitem.getText();
            String type = String.valueOf(cboitemType.getSelectedItem());
            String description = txtdescription.getText();
            try(Connection con = Connector.getConnection()){
                PreparedStatement st = con.prepareStatement("UPDATE Item SET item_name = ?, type = ?, description = ?, image = ? WHERE item_id = ?");
                st.setString(1, item);
                st.setString(2, type);
                st.setString(3, description);
                st.setString(4, path);
                st.setString(5, sid);
                st.executeUpdate();
                JOptionPane.showMessageDialog(null, "Record Updated Successfully.");
                resetField();
                getData();
            }catch(SQLException e){
                e.printStackTrace();
            };
        }else{
          JOptionPane.showMessageDialog(null, "Select a record to update","Failure",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnupdateActionPerformed
    
    private void resetField(){
         // Load and fit the image
        try {
            // Load the image from a file (can be from a URL or other source)
            BufferedImage img = ImageIO.read(new File("/Users/macbookpro14/Desktop/Fake Desktop/SETEC/Year 4/Java with IReport/PawnSystem/src/images/No_Image_Available.jpg"));
            
            // Resize the image to fit the JLabel's size
            Image scaledImage = img.getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(), Image.SCALE_SMOOTH);
            
            // Set the scaled image as the icon for the JLabel
            imageLabel.setIcon(new ImageIcon(scaledImage));
        } catch (IOException e) {
            e.printStackTrace();
        }
        txtid.setText("");
        txtitem.setText("");
        cboitemType.setSelectedIndex(0);
        txtdescription.setText("");
        getData();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inventory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try{
            FlatLaf.registerCustomDefaultsSource("images");
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
        }catch(Exception e){
            e.printStackTrace();
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnupdate;
    private javax.swing.JComboBox<String> cboitemType;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelTotalInventory;
    private javax.swing.JTable tblInventory;
    private javax.swing.JTextArea txtdescription;
    private javax.swing.JTextField txtid;
    private javax.swing.JTextField txtitem;
    // End of variables declaration//GEN-END:variables
}
